//
//  TextView+Serializers.swift
//
//
//  Generated by Author on 2022-07-26 13:43:08 +0000.
//

extension FontDesc : DictionarySerialization {
    
    init(_ dictionary: [String : Any]) throws {
        family = try dictionary.expect("family")
        weight = try dictionary.expect("weight")
        size = try dictionary.expect("size")
    }
    
    func toDictionary() -> [String : Any] {
        return [
            "family":family,
            "weight":weight,
            "size":size
        ]
    }
}

extension TextView : DictionarySerialization {
    
    init(_ dictionary: [String : Any], _ cache:InstanceCache? = nil) throws {
        text = try dictionary.expect("text")
        textColor = SDLColor(try dictionary.expectDictionary("textColor"), cache)
        fontDesc = FontDesc(try dictionary.expectDictionary("fontDesc"), cache)
        lineHeight = try dictionary.expect("lineHeight")
        characterSpacing = try dictionary.expect("characterSpacing")
        lineStackingStrategy = try dictionary.expect("lineStackingStrategy")
        textWrapping = try dictionary.expect("textWrapping")
        textTrimming = try dictionary.expect("textTrimming")
        textAlignment = try dictionary.expect("textAlignment")
        maxLines = try dictionary.expect("maxLines")
    }
    
    func toDictionary() -> [String : Any] {
        return [
            "text":text,
            "textColor":textColor.toDictionary(),
            "fontDesc":fontDesc.toDictionary(),
            "lineHeight":lineHeight,
            "characterSpacing":characterSpacing,
            "lineStackingStrategy":lineStackingStrategy,
            "textWrapping":textWrapping,
            "textTrimming":textTrimming,
            "textAlignment":textAlignment,
            "maxLines":maxLines
        ]
    }
}

